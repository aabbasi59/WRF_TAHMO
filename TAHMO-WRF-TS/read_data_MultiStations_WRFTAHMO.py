# -*- coding: utf-8 -*-

# Reading TAHMO Data for different stations and WRF TS list output data
# The input folders/files should be generated according to the TAHMO standard
# The WRF_LIST data should be prepared by NCL code to generate csv files to be used in this code.

"""
Created on Thu August 28 2016
@author: aliabbasi [aliabbasi.civileng@gmail.com]
"""
import pdb
import sys
import pandas as pd
import glob
import matplotlib.pyplot as plt
#import pandas.tools.rplot as rplot
import pylab
import matplotlib
#import meteolib
import os    # operating system routines
import scipy # Scientific Python functions
import pylab # Plotting functions
import math
import numpy as np
import matplotlib.dates as mdates
from matplotlib import rc, rcParams
from datetime import datetime, timedelta
import pdb
from scipy import stats
import matplotlib.pyplot as plt
import statsmodels.api as sm
import statsmodels.formula.api as smf
from statsmodels.sandbox.regression.predstd import wls_prediction_std
import statsmodels.tools
from statsmodels.tools.eval_measures import (
    maxabs, meanabs, medianabs, medianbias, mse, rmse, stde, vare,
   aic, aic_sigma, aicc, aicc_sigma, bias, bic, bic_sigma,
    hqic, hqic_sigma, iqr)
from sklearn.metrics import accuracy_score
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
from matplotlib.ticker import LinearLocator, FormatStrFormatter
#from pandaslib import Timestamp
#import totalLibs
import datetime
import matplotlib as mpl
mpl.rcParams['lines.linewidth'] = 2
mpl.rcParams['lines.color'] = 'r'
mpl.rcParams['agg.path.chunksize'] =0
import gc
import seaborn as sns  # https://stanford.edu/~mwaskom/software/seaborn/tutorial.html
""" Seaborn is a Python visualization library based on matplotlib.
    It provides a high-level interface for drawing attractive statistical graphics.
"""
#-------------------------------------------------------
pylab.rc('text', usetex=True)
# Change default settings for figures
newdefaults = {'font.family' : 'serif',
               'font.serif': 'Times New Roman',
               #'fontname':    'Times New Roman',  # Use Arial font
               'backend':       'ps',  # Save figure as EPS file
               'axes.labelsize':   40,  # Axis label size in points
               'text.fontsize':    40,  # Text size in points
               'legend.fontsize':  50,  # Legend label size in points
               'xtick.labelsize':  40,  # x-tick label size in points
               'ytick.labelsize':  40,  # y-tick label size in points
               'lines.markersize': 60,  # markersize, in points
               'lines.linewidth':   2.5 # line width in points
               }
pylab.rcParams.update(newdefaults)
#===================================================================================================
class read_WRF_TS:
	'''Reading generated TS list from WRF.
	The csv files were generated by a NCL code. For each station there is a seperate csv file
	'''
	def __init__(self, path_folder):
		self.path_folder = path_folder
		#self.filename = filename

	def reading_CSV(self):
		i = 0
		self.delimitsign = ','        #'\t' # For tab (\t) delimited file
		self.commentsign='#'
		#self.folder_list = os.listdir(self.path_folder)
		self.file_list = os.listdir(self.path_folder)
		df_WRF_total = []
		for file_ in self.file_list:
			i += 1
			#print ("Reading/Processing File...",j,i, "..... " , file_)
			#print (self.file_list)
			file_WRF = self.path_folder +'/' + file_
			print (file_WRF)
			df_WRF = pd.read_csv(file_WRF,na_values=['-9999.0000'],delimiter= self.delimitsign , comment = self.commentsign,header=0, \
                                     index_col =0, keep_date_col=True,error_bad_lines=False,\
								 	 dtype ={'DateTime':np.float64, 'Ta': np.float64, 'q': np.float64, 'u': np.float64, 'v': np.float64, \
											'psfc': np.float64, 'glw': np.float64, 'gsw': np.float64, 'hfx': np.float64, 'lh': np.float64, 'tsk': np.float64,\
											'tslb': np.float64, 'rainc': np.float64, 'rainnc': np.float64, 'clw': np.float64}, \
                                     names =['DateTime', 'Ta', 'q', 'u', 'v', 'psfc', 'glw', 'gsw', 'hfx', 'lh', 'tsk', 'tslb', 'rainc', 'rainnc', 'clw'] )

			#print df_WRF.index
			df_WRF.index = pd.to_datetime((df_WRF.index.values*1e9).astype(int))       # Converting time (from second) to standard time format
			df_WRF.index = df_WRF.index + pd.DateOffset(years=46,months=5, days=29)
			#df_WRF_total = df_WRF.reindex(df_WRF.index.rename('DateTime'))
			#df_WRF_total[file_ + 'Ta'] = df_WRF['Ta']
			#df_WRF_total[file_ + 'q'] = df_WRF['q']
			#df_WRF_total[file_ + 'u'] = df_WRF['u']
			#df_WRF_total[file_ + 'v'] = df_WRF['v']
			#df_WRF_total[file_ + 'psfc'] = df_WRF['psfc']
			#df_WRF_total[file_ + 'glw'] = df_WRF['glw']
			#df_WRF_total[file_ + 'gsw'] = df_WRF['gsw']
			#df_WRF_total[file_ + 'hfx'] = df_WRF['hfx']
			#df_WRF_total[file_ + 'lh'] = df_WRF['lh']
			#df_WRF_total[file_ + 'tsk'] = df_WRF['tsk']
			#df_WRF_total[file_ + 'tslb'] = df_WRF['tslb']
			#df_WRF_total[file_ + 'rainc'] = df_WRF['rainc']
			#df_WRF_total[file_ + 'rainnc'] = df_WRF['rainnc']
			#df_WRF_total[file_ + 'clw'] = df_WRF['clw']

			df_WRF_sum = open('../inputData/WRF/WRF_' + file_[0:8] + '.txt', 'w')
			df_WRF_sum.write(str(df_WRF.describe().to_string()))
			df_WRF_sum.close()

		return df_WRF
#==============================================================================================================================
class read_WRF_TAHMO:
	'''Reading generated TS list from WRF and TAHMO data to compare the data.
	'''
	def __init__(self, path_folder_TAHMO, path_folder_WRF, save_path):
		self.path_folder_TAHMO = path_folder_TAHMO
		self.path_folder_WRF = path_folder_WRF
		self.save_path = save_path

	def reading_CSV(self):
		i = 0
		self.delimitsign = ','             #'\t' # For tab (\t) delimited file
		self.commentsign='#'
		#self.folder_list = os.listdir(self.path_folder)
		self.file_list_WRF = os.listdir(self.path_folder_WRF)
		self.file_list_TAHMO = os.listdir(self.path_folder_TAHMO)
		df_WRF = []
		df_TAHMO = []

		for file_ in self.file_list_WRF:
			i = 1
			file_check = self.path_folder_TAHMO + file_
			self.station_ID = file_[0:8]
			print (self.station_ID)
			if os.path.isfile(file_check):
				#print ("Reading/Processing File...",j,i, "..... " , file_)
				file_WRF = self.path_folder_WRF + file_
				print (file_WRF)
				df_WRF = pd.read_csv(file_WRF,na_values=['-9999.0000'],delimiter= self.delimitsign , comment = self.commentsign,header=0, \
                                    index_col =0, keep_date_col=True,error_bad_lines=False,\
								 	dtype ={'DateTime':np.float64, 'Ta': np.float64, 'q': np.float64, 'u': np.float64, 'v': np.float64, \
									'psfc': np.float64, 'glw': np.float64, 'gsw': np.float64, 'hfx': np.float64, 'lh': np.float64, 'tsk': np.float64,\
									'tslb': np.float64, 'rainc': np.float64, 'rainnc': np.float64, 'clw': np.float64}, \
                                    names =['DateTime', 'Ta', 'q', 'u', 'v', 'psfc', 'glw', 'gsw', 'hfx', 'lh', 'tsk', 'tslb', 'rainc', 'rainnc', 'clw'] )

				df_WRF.index = pd.to_datetime(((df_WRF.index.values)*1e9).astype(int))
				df_WRF.index = df_WRF.index + pd.DateOffset(years=46,months=5, days=29)
				#df_WRF_total = df_WRF.reindex(df_WRF.index.rename('DateTime'))
				#df_WRF_total[file_ + 'Ta'] = df_WRF['Ta']
				#df_WRF_total[file_ + 'q'] = df_WRF['q']
				#df_WRF_total[file_ + 'u'] = df_WRF['u']
				#df_WRF_total[file_ + 'v'] = df_WRF['v']
				#df_WRF_total[file_ + 'psfc'] = df_WRF['psfc']
				#df_WRF_total[file_ + 'glw'] = df_WRF['glw']
				#df_WRF_total[file_ + 'gsw'] = df_WRF['gsw']
				#df_WRF_total[file_ + 'hfx'] = df_WRF['hfx']
				#df_WRF_total[file_ + 'lh'] = df_WRF['lh']
				#df_WRF_total[file_ + 'tsk'] = df_WRF['tsk']
				#df_WRF_total[file_ + 'tslb'] = df_WRF['tslb']
				#df_WRF_total[file_ + 'rainc'] = df_WRF['rainc']
				#df_WRF_total[file_ + 'rainnc'] = df_WRF['rainnc']
				#df_WRF_total[file_ + 'clw'] = df_WRF['clw']

				file_TAHMO = self.path_folder_TAHMO + file_
				print (file_TAHMO)
				df_TAHMO = pd.read_csv(file_TAHMO,na_values=['-9999.0000'],delimiter= self.delimitsign , comment = self.commentsign,header=0, \
                                     index_col =0,dayfirst=True,parse_dates=True,infer_datetime_format=True, keep_date_col=True, \
									 names =['DateTime','atm_pressure','ele_cobductivity','precipitation','radiation','RH','air_temp','vap_pressure','wind_Dir', \
									 'wind_Gusts','wind_Speed'])


				df_total_Data_0 = pd.concat([df_WRF, df_TAHMO], axis='index')     # Concating WRF and TAHMO data in a single dataframe
				df_total_Data_1 = df_total_Data_0.interpolate(method='time')      # filling NaN values by interpolating on time
				df_total_Data_2 = df_total_Data_1.fillna(method='bfill')		  # to fill the first NaN value!

				df_Total_Data_0 = pd.DataFrame(index=df_total_Data_2.index)
				df_Total_Data = pd.DataFrame(index=df_TAHMO.index)

				df_Total_Data['TAHMO_SR']= df_total_Data_2['radiation']				# TAHMO >>>>  Short-wave radiation
				df_Total_Data['WRF_SR']= df_total_Data_2['gsw']					    # WRF >>>>    Short-wave radiation
				df_Total_Data['TAHMO_Ta']= df_total_Data_2['air_temp']
				df_Total_Data['WRF_Ta']= df_total_Data_2['Ta']-273.15


				print df_Total_Data
				#Observation = df_total_Data_1['radiation']
				#print Observation
				#Model = df_total_Data_1 ['gsw']
				#print Model

				error = df_Total_Data['TAHMO_SR'] - df_Total_Data['WRF_SR']
				#print error
				# numpy statistics: http://docs.scipy.org/doc/numpy/reference/routines.statistics.html
				# scikit-learn : http://scikit-learn.org/stable/modules/classes.html#module-sklearn.metrics
				# statsmodels.tsa.tsatools : http://statsmodels.sourceforge.net/devel/tools.html
				rmse_SR = statsmodels.tools.eval_measures.rmse(df_Total_Data['TAHMO_SR'],df_Total_Data['WRF_SR'])
				rmse_Ta = statsmodels.tools.eval_measures.rmse(df_Total_Data['TAHMO_Ta'],df_Total_Data['WRF_Ta'])
				maxabs_SR = statsmodels.tools.eval_measures.maxabs(df_Total_Data['TAHMO_SR'],df_Total_Data['WRF_SR'])
				meanabs_SR = statsmodels.tools.eval_measures.meanabs(df_Total_Data['TAHMO_SR'],df_Total_Data['WRF_SR'])
				medianabs_SR = statsmodels.tools.eval_measures.medianabs(df_Total_Data['TAHMO_SR'],df_Total_Data['WRF_SR'])
				medianbias_SR = statsmodels.tools.eval_measures.medianbias(df_Total_Data['TAHMO_SR'],df_Total_Data['WRF_SR'])
				mse_SR = statsmodels.tools.eval_measures.mse(df_Total_Data['TAHMO_SR'],df_Total_Data['WRF_SR'])
				stde_SR = statsmodels.tools.eval_measures.stde(df_Total_Data['TAHMO_SR'],df_Total_Data['WRF_SR'])
				vare_SR = statsmodels.tools.eval_measures.vare(df_Total_Data['TAHMO_SR'],df_Total_Data['WRF_SR'])
				#aic_SR = statsmodels.tools.eval_measures.aic(llf, nobs, df_modelwc)
				#aic_sigma_SR = statsmodels.tools.eval_measures.aic_sigma(sigma2, nobs, df_modelwc)
				#aicc_SR = statsmodels.tools.eval_measures.aicc()
				#aicc_sigma_SR = statsmodels.tools.eval_measures.aicc_sigma()
				bias_SR = statsmodels.tools.eval_measures.bias(df_Total_Data['TAHMO_SR'],df_Total_Data['WRF_SR'])
				#bic_SR = statsmodels.tools.eval_measures.bic()
				#bic_sigma_SR = statsmodels.tools.eval_measures.bic_sigma()
				#hqic_SR = statsmodels.tools.eval_measures.hqic()
				#hqic_sigma_SR = statsmodels.tools.eval_measures.hqic_sigma()
				iqr_SR = statsmodels.tools.eval_measures.iqr(df_Total_Data['TAHMO_SR'],df_Total_Data['WRF_SR'])
				print rmse_SR, maxabs_SR, meanabs_SR, medianabs_SR, medianbias_SR, mse_SR, stde_SR, vare_SR, bias_SR, iqr_SR

				corrcoeff_SR = np.corrcoef(df_Total_Data['TAHMO_SR'],df_Total_Data['WRF_SR'])
				print corrcoeff_SR

				corrcoeff_Ta = np.corrcoef(df_Total_Data['TAHMO_Ta'],df_Total_Data['WRF_Ta'])
				print corrcoeff_Ta

				sns.set(style="whitegrid")

				# Make an example dataset with y ~ x
				#rs = np.random.RandomState(7)
				#x = rs.normal(2, 1, 75)
				#y = 2 + 1.5 * x + rs.normal(0, 2, 75)

				# Plot the residuals after fitting a linear model
				#sns.residplot(df_Total_Data['TAHMO_SR'], df_Total_Data['WRF_SR'], lowess=True, color="g")
				#plt.show()

				#iris = sns.load_dataset("iris")
				#sns.pairplot(df_Total_Data);
				#plt.show()

				#sns.regplot(x=df_Total_Data['TAHMO_SR'], y=df_Total_Data['WRF_SR']);
				#plt.show()

				#sns.lmplot(x="TAHMO_SR", y="WRF_SR", data=df_Total_Data);
				#sns.jointplot(x="TAHMO_SR", y="WRF_SR", data=df_Total_Data);
				#sns.jointplot(x=df_Total_Data['TAHMO_SR'], y=df_Total_Data['WRF_SR'], kind="hex", color="k");
				#sns.jointplot(x="TAHMO_SR", y="WRF_SR", data=df_Total_Data, kind="kde");

				#f, ax = plt.subplots(figsize=(6, 6))
				#sns.kdeplot(df_Total_Data['TAHMO_SR'], df_Total_Data['WRF_SR'], ax=ax)
				#sns.rugplot(df_Total_Data['TAHMO_SR'], color="g", ax=ax)
				#sns.rugplot(df_Total_Data['WRF_SR'], vertical=True, ax=ax);

				#f, ax = plt.subplots(figsize=(6, 6))
				#cmap = sns.cubehelix_palette(as_cmap=True, dark=0, light=1, reverse=True)
				#sns.kdeplot(df_Total_Data['TAHMO_SR'], df_Total_Data['WRF_SR'], cmap=cmap, n_levels=60, shade=True);


				#g = sns.jointplot(x="TAHMO_SR", y="WRF_SR", data=df_Total_Data, kind="kde", color="m")
				#g.plot_joint(plt.scatter, c="w", s=30, linewidth=1, marker="+")
				#g.ax_joint.collections[0].set_alpha(0)
				#g.set_axis_labels("$X$", "$Y$");

				#g = sns.PairGrid(df_Total_Data)
				#g.map_diag(sns.kdeplot)
				#g.map_offdiag(sns.kdeplot, cmap="Blues_d", n_levels=6);

				#sns.set(style="ticks")

				# Load the example dataset for Anscombe's quartet
				# Show the results of a linear regression within each dataset
				#sns.lmplot(x="TAHMO_SR", y="WRF_SR", col="TAHMO_SR", hue="WRF_SR", data=df_Total_Data, \
           		#col_wrap=2, ci=None, palette="muted", size=4, scatter_kws={"s": 40, "alpha": 1})

				#plt.show()



				# Plotting the parameters for each Station
				plotting_class = plotting_Data(df_TAHMO,df_WRF,self.save_path, self.station_ID)
				#plotting_class.plotting_Ta()
				#plotting_class.plotting_SWR()
				#plotting_class.plotting_rain()

		return
#==============================================================================================================================
class read_TAHMO_TS:
	'''Reading time series of TAHMO.
	The csv files are exported by TAHMO in different folders. Please check the straucture of the imported folders!
	'''
	def __init__(self, path_folder):
		self.path_folder = path_folder
		#self.filename = filename

	def reading_CSV(self):
		self.folder_list = os.listdir(self.path_folder)
		#print ("The Number of Folders  is >>>> " , len(self.folder_list))
		self.delimitsign = ','             #'\t' # For tab (\t) delimited file
		self.commentsign='#'
		i = 0
		j = 0
		df_TAHMO_total = pd.DataFrame()
		df_TAHMO_total_2 = pd.DataFrame()
		for folder_ in self.folder_list:
			j += 1
			self.file_dir = self.path_folder + '/' + folder_
			#self.save_graph =self.path_folder + 'Plots/' +folder_+ '/'
			#if not os.path.exists(os.path.dirname(self.save_graph)):
			#	os.makedirs(os.path.dirname(self.save_graph))
			self.station_ID = folder_[:-9]
			print (self.station_ID)
			self.file_list = os.listdir(self.file_dir)
			#print ("The Number of Files  is >>>> " , folder_,  len(self.file_list))
			num_file = len(self.file_list)
			for file_ in self.file_list:
				i += 1
				print ("Reading/Processing File...",j,i, "..... " , file_)
				file_TAHMO = self.file_dir +'/' + file_
				print (file_TAHMO)
				df_TAHMO = pd.read_csv(file_TAHMO,na_values=['-9999.0000'],delimiter= self.delimitsign, comment = self.commentsign, \
                                     index_col =0,dayfirst=True,parse_dates=True,infer_datetime_format=True, keep_date_col=True, \
                                     names =['DateTime','X'] ,header=None)
				print file_[-23:]
				if file_[-23:] == "atmosphericpressure.csv":
					df_TAHMO_total ['atm_pressure'] = df_TAHMO ['X']
					#print (df_TAHMO_total)
				elif file_[-26:] == "electricalconductivity.csv":
					df_TAHMO_total ['EC'] = df_TAHMO ['X']   # EC: Electrecal Conductivity
				elif file_[-17:] == "precipitation.csv":
					df_TAHMO_total ['P'] = df_TAHMO ['X']     # P: precipitation
				elif file_[-13:] == "radiation.csv":
					df_TAHMO_total ['Rs'] = df_TAHMO ['X']    # Rs: Shortwave radiation
				elif file_[-20:] == "relativehumidity.csv":
					df_TAHMO_total ['RH'] = df_TAHMO ['X']   # RH: relative humidity
				elif file_[-15:] == "temperature.csv":
					df_TAHMO_total ['Ta'] = df_TAHMO ['X']  # Ta: air temperature
				elif file_[-17:] == "vaporpressure.csv":
					df_TAHMO_total ['vp'] = df_TAHMO ['X']  # vp: vapor pressure
				elif file_[-17:] == "winddirection.csv":
					df_TAHMO_total ['wD'] = df_TAHMO ['X']   # wD: wind direction
				elif file_[-13:] == "windgusts.csv":
					df_TAHMO_total ['wG'] = df_TAHMO ['X']  # wG: winf Gusts
				elif file_[-13:] == "windspeed.csv":
					df_TAHMO_total ['wS'] = df_TAHMO ['X']  # wS: wind speed

				#df_TAHMO_sum = open('./Output_data/TAHMO/' + self.station_ID + '.txt', 'w')
				#df_TAHMO_sum.write(str(df_TAHMO_total.describe().to_string()))
				#df_TAHMO_sum.close()

				df_TAHMO_total.to_csv("./Output_data/TAHMO/" + self.station_ID + ".csv")

		return df_TAHMO
#==============================================================================================================================
class plotting_Data:
	'''Plotting the Data. Two input:
	The name of Data Set to plot
	The path for Saving the plot
	Should be supplied
	'''

	def __init__(self, df_tahmo, df_wrf,path_to_save, station_ID):
		self.station_ID = station_ID
		self.df_to_plot_TAHMO = df_tahmo                  # The name of dataFrame to be plotted
		self.df_to_plot_WRF = df_wrf                  # The name of dataFrame to be plotted
		self.path_to_save = path_to_save              # The path for saving the graphs
		# Plot Configuration
		plotting_Data.x_lable_size = 50               #  x Label Size
		plotting_Data.y_lable_size = 50               #  y Label Size
		plotting_Data.legend_size = 45                #  Legend Size
		plotting_Data.titel_size = 70                 #  Title Size
		plotting_Data.figure_size=(20* 1.618, 20)     #  Figure Size
		plotting_Data.line_width = 3.0                #  Line width
		plotting_Data.marker_size = 40                # Marker Sice in Scatter Plots
		plotting_Data.date1 = datetime.datetime(year=2016,month=6,day=30,hour=00, minute=00, second= 00 )    # The Start Date of Plot
		plotting_Data.date2 = datetime.datetime(year=2016,month=7,day=10,hour=00, minute=00, second= 00)      # The End Date of Plot
		# -------
	# ----------------------------------------------------------------------
	#  Air Temperature
	def plotting_Ta(self):
		pylab.figure('AirTEmperature_time',figsize=self.figure_size)
		pylab.clf()
		ax=pylab.subplot(111)
		#ax.set_ylim(-100,100)
		ax.set_xlim(self.date1,self.date2)
		pylab.ylabel(r'${\rm Air \, Temperature[C]}$',size=self.y_lable_size)
		pylab.xlabel(r'${\rm Time}$',size=self.x_lable_size)
		plt.plot(self.df_to_plot_TAHMO.index, self.df_to_plot_TAHMO['air_temp'], color='r',label= r'$TAHMO$',linewidth=self.line_width)
		plt.plot(self.df_to_plot_WRF.index, self.df_to_plot_WRF['Ta']-273.15, color='b',label= r'$WRF$',linewidth=self.line_width)
		pylab.gcf().autofmt_xdate()
		plt.grid(color='b', alpha=0.9, linestyle='dashed', linewidth=0.6)
		plt.legend(loc='best',prop={'size':self.legend_size})
		plt.gcf().autofmt_xdate()
		plt.savefig(self.path_to_save + self.station_ID + '_airTemp.png',bbox_inches='tight')
		#plt.show()
		plt.close()
		print ("Plotting Graph: Air Temperature in Time -------------- > Plotted !"       )
		return
	# ------------------------------------------------------------------------
	# Incoming Short-wave Radiation
	def plotting_SWR(self):
		pylab.figure('SWR_time',figsize=self.figure_size)
		pylab.clf()
		ax=pylab.subplot(111)
		ax.set_ylim(0,1100)
		ax.set_xlim(self.date1,self.date2)
		pylab.ylabel(r'${\rm Short \, Wave \, Radiation[Wm^{-2}]}$',size=self.y_lable_size)
		pylab.xlabel(r'${\rm Time}$',size=self.x_lable_size)
		plt.plot(self.df_to_plot_TAHMO.index, self.df_to_plot_TAHMO['radiation'], color='r',label= r'$TAHMO$',linewidth=self.line_width)
		plt.plot(self.df_to_plot_WRF.index, self.df_to_plot_WRF['gsw'], color='b',label= r'$WRF$',linewidth=self.line_width)
		pylab.gcf().autofmt_xdate()
		plt.grid(color='b', alpha=0.9, linestyle='dashed', linewidth=0.6)
		plt.legend(loc='best',prop={'size':self.legend_size})
		plt.gcf().autofmt_xdate()
		plt.savefig(self.path_to_save + self.station_ID + '_swr.png',bbox_inches='tight')
		#plt.show()
		plt.close()
		print ("Plotting Graph: Incoming Short-wave Radiation in time -------------- > Plotted!"  )
		return
	# ------------------------------------------------------------------------
	# Precipitation
	def plotting_rain(self):
		pylab.figure('rain_time',figsize=self.figure_size)
		pylab.clf()
		ax=pylab.subplot(111)
		#ax.set_ylim(0,2)
		ax.set_xlim(self.date1,self.date2)
		pylab.ylabel(r'${\rm Precipitation[mm]}$',size=self.y_lable_size)
		pylab.xlabel(r'${\rm Time}$',size=self.x_lable_size)
		plt.plot(self.df_to_plot_TAHMO.index, self.df_to_plot_TAHMO['precipitation'].cumsum(), color='r',label= r'$TAHMO$',linewidth=self.line_width)
		plt.plot(self.df_to_plot_WRF.index, self.df_to_plot_WRF['rainc'], '--g',label= r'$WRF(rainc)$',linewidth=self.line_width)
		plt.plot(self.df_to_plot_WRF.index, self.df_to_plot_WRF['rainnc'], '--y',label= r'$WRF(rainnc)$',linewidth=self.line_width)
		plt.plot(self.df_to_plot_WRF.index, self.df_to_plot_WRF['rainc']+ self.df_to_plot_WRF['rainnc'], color='b',label= r'$WRF$',linewidth=self.line_width)
		pylab.gcf().autofmt_xdate()
		plt.grid(color='b', alpha=0.9, linestyle='dashed', linewidth=0.6)
		plt.legend(loc='best',prop={'size':self.legend_size})
		plt.gcf().autofmt_xdate()
		plt.savefig(self.path_to_save + self.station_ID + '_rain.png',bbox_inches='tight')
		#plt.show()
		plt.close()
		print ("Plotting Graph: Rain in time -------------- > Plotted!"  )
		return
	# ------------------------------------------------------------------------
	#  Relative Humidity
	def plotting_RH(self):
		pylab.figure('RH_time',figsize=self.figure_size)
		pylab.clf()
		ax=pylab.subplot(111)
		#ax.set_ylim(15,50)
		ax.set_xlim(self.date1,self.date2)
		pylab.ylabel(r'${\rm Relatiive \, Humidity[\%]}$',size=self.y_lable_size)
		pylab.xlabel(r'${\rm Time}$',size=self.x_lable_size)
		plt.plot(self.df_to_plot_TAHMO.index, self.df_to_plot_TAHMO['RH'], color='r',label= r'$TAHMO$',linewidth=self.line_width)
		plt.plot(self.df_to_plot_WRF.index, self.df_to_plot_WRF['q'], color='b',label= r'$WRF$',linewidth=self.line_width)
		pylab.gcf().autofmt_xdate()
		plt.grid(color='b', alpha=0.9, linestyle='dashed', linewidth=0.6)
		plt.legend(loc='best',prop={'size':self.legend_size})
		plt.gcf().autofmt_xdate()
		plt.savefig(self.path_to_save +'RH_time.tif',bbox_inches='tight')
		#plt.show()
		plt.close()
		print ("Plotting Graph: Relative Humidity in Time -------------- > Plotted!"  )
		return
	# ------------------------------------------------------------------------
	# Wind Speed
	def plotting_WindSpeed(self):
		pylab.figure('WindSpeed_time',figsize=self.figure_size)
		pylab.clf()
		ax=pylab.subplot(111)
		#ax.set_ylim(15,50)
		ax.set_xlim(self.date1,self.date2)
		pylab.ylabel(r'${\rm Wind \, Speed[m/s]}$',size=self.y_lable_size)
		pylab.xlabel(r'${\rm Time}$',size=self.x_lable_size)
		#plt.plot(self.df_to_plot.index, self.df_to_plot['U_EC'], color='b',label= r'$EC$',linewidth=self.line_width)
		plt.plot(self.df_to_plot.index, self.df_to_plot['U2'], color='r',label= r'$U_2$',linewidth=self.line_width)
		#plt.plot(self.df_to_plot.index, self.df_to_plot['U2_S2'], color='g',label= r'$S2$',linewidth=self.line_width)
		pylab.gcf().autofmt_xdate()
		plt.grid(color='b', alpha=0.9, linestyle='dashed', linewidth=0.6)
		plt.legend(loc='best',prop={'size':self.legend_size})
		plt.gcf().autofmt_xdate()
		plt.savefig(self.path_to_save +'WindSpeed_time.tif',bbox_inches='tight')
		#plt.show()
		plt.close()
		print ("Plotting Graph: Wind Speed in Time -------------- > Plotted!" )
		return
	# ------------------------------------------------------------------------
	# Wind Direction
	def plotting_WindDirection(self):
		pylab.figure('WindDirection_time',figsize=self.figure_size)
		pylab.clf()
		ax=pylab.subplot(111)
		#ax.set_ylim(15,50)
		ax.set_xlim(self.date1,self.date2)
		pylab.ylabel(r'${\rm Wind \, Direction[Degree \,from\, N]}$',size=self.y_lable_size)
		pylab.xlabel(r'${\rm Time}$',size=self.x_lable_size)
		#plt.plot(self.df_to_plot.index, self.df_to_plot['WD_EC'], color='b',label= r'$EC$',linewidth=self.line_width)
		plt.plot(self.df_to_plot.index, self.df_to_plot['WD'], color='r',label= r'$WD$',linewidth=self.line_width)
		#plt.plot(self.df_to_plot.index, self.df_to_plot['WD_S2'], color='g',label= r'$S2$',linewidth=self.line_width)
		pylab.gcf().autofmt_xdate()
		plt.grid(color='b', alpha=0.9, linestyle='dashed', linewidth=0.6)
		plt.legend(loc='best',prop={'size':self.legend_size})
		plt.gcf().autofmt_xdate()
		plt.savefig(self.path_to_save +'WindDirection_time.tif',bbox_inches='tight')
		#plt.show()
		plt.close()
		print ("Plotting Graph: Wind Direction in Time -------------- > Plotted!")
		return
	# ------------------------------------------------------------------------
#==============================================================================================================
def main_reading_TAHMO_data():
	#  ------   Reading imported TAHMO data.
	TAHMO_path = "./Input_data"
	read_TAHMO_TS_class = read_TAHMO_TS(TAHMO_path)
	TAHMO_data = read_TAHMO_TS_class.reading_CSV()
	return
# ---------------------------------------------------------------------------------------
def main_reading_WRF_TS_data():
	#  ------   Reading WRF TS data.
	WRF_path = "../inputData/WRF/WRF_TS/"
	read_WRF_TS_class = read_WRF_TS(WRF_path)
	WRF_data = read_WRF_TS_class.reading_CSV()
	return
# ---------------------------------------------------------------------------------------
def main_reading_WRF_TAHMO_data():
	#  ------   Reading WRF and TAHMO TS data.
	WRF_path = "./Output_data/WRF/WRF_TS/"
	TAHMO_path = "./Output_data/WRF/TAHMO_TS/"
	save_path = "./Output_data/WRF/"
	read_WRF_TAHMO_class = read_WRF_TAHMO(TAHMO_path,WRF_path,save_path)
	read_WRF_TAHMO_class.reading_CSV()
	return
# ---------------------------------------------------------------------------------------
#*******************************************************************************
# **********************   Main Part of Programm    ***************************
#*******************************************************************************
if __name__ == '__main__':

	# -------    Reading TAHMO Data
	#main_reading_TAHMO_data()

	# -------    Reading WRF data
	#main_reading_WRF_TS_data()

	# -------    Reading both WRF and TAHMO data
	main_reading_WRF_TAHMO_data()
